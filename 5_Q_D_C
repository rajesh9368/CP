(02-08-2024)----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
1--->https://www.geeksforgeeks.org/problems/edit-distance3702/1

     (Solution-1: Memorization Approach)
     
        class Solution {
    static int editD(String s1, String s2, int i, int j, int dp[][]){
        if(i<0)return j+1;
        if(j<0)return i+1;
        if(dp[i][j]!=-1)return dp[i][j];
        if(s1.charAt(i)==s2.charAt(j)){
            return dp[i][j]=editD(s1, s2, i-1, j-1, dp);
        }else{
            return dp[i][j]=1+Math.min(editD(s1, s2, i-1, j-1, dp), Math.min(editD(s1, s2, i-1, j, dp), editD(s1, s2, i, j-1, dp)));
        }
    }
    public int editDistance(String s1, String s2) {
        // Code here
        int n=s1.length();
        int m=s2.length();
        int dp[][]=new int[n+1][m+1];
        for(int row[]:dp){
            Arrays.fill(row, -1);
            
        }
        return editD(s1, s2, n-1, m-1, dp);
    }
}


        (Solution-2: Tabulation Method)
    
        
class Solution {
    public int editDistance(String s1, String s2) {
        // Code here
        int n=s1.length();
        int m=s2.length();
        int[][] dp=new int[n+1][m+1];
        for(int i=0; i<=n; i++){
            dp[i][0]=i;
        }
        for(int j=0; j<=m; j++){
            dp[0][j]=j;
        }
        for(int i=1; i<=n; i++){
            for(int j=1; j<=m; j++){
                if(s1.charAt(i-1)==s2.charAt(j-1)){
                    dp[i][j]=dp[i-1][j-1];
                }else{
                    dp[i][j]=1+Math.min(dp[i-1][j-1], Math.min(dp[i-1][j], dp[i][j-1]));
                }
            }
        }
        return dp[n][m];
    }



    (Solution-3: Space Optimization Method)

class Solution {
    public int editDistance(String s1, String s2) {
        // Code here
        int n=s1.length();
        int m=s2.length();
        int prev[]=new int[m+1];
        int cur[]=new int[m+1];
        for(int j=0; j<=m; j++){
            prev[j]=j;
        }
        for(int i=1; i<=n; i++){
            cur[0]=i;
            for(int j=1; j<=m; j++){
                if(s1.charAt(i-1)==s2.charAt(j-1)){
                    cur[j]=prev[j-1];
                }else{
                    cur[j]=1+Math.min(prev[j-1],Math.min(prev[j], cur[j-1]));
                }
            }
            prev=cur.clone();
        }
        return cur[m];
    }
}



2------>https://leetcode.com/problems/left-and-right-sum-differences/description/

          class Solution {
    public int[] leftRightDifference(int[] nums) {
        int n=nums.length;
        int leftSum[]=new int[n];
        for(int i=1; i<n; i++){
            leftSum[i]=leftSum[i-1]+nums[i-1];
        }
        int rightSum[]=new int[n];
        for(int i=n-2; i>=0; i--){
            rightSum[i]=rightSum[i+1]+nums[i+1];
        }
        int ans[]=new int[n];
        for(int i=0; i<n; i++){
            ans[i]=Math.abs(leftSum[i]-rightSum[i]);
        }
        return ans;
    }
}



3------->https://leetcode.com/problems/minimum-swaps-to-group-all-1s-together-ii/description/?envType=daily-question&envId=2024-08-02


                   class Solution {
    public int minSwaps(int[] nums) {
        int n=nums.length;
        int totalOnes=0;
        int circular[]=new int[2*n];
        for(int i=0; i<n; i++){
            totalOnes+=nums[i];
            circular[i]=nums[i];
            circular[n+i]=nums[i];
        }
        int start=0;
        int end=0;
        int zeroCount=0;
        int minZero=Integer.MAX_VALUE;
        for(; end<totalOnes; end++){
            if(circular[end]==0){
                zeroCount++;
            }
        }
        for(;end<circular.length; end++){
            if(circular[end]==0){
                zeroCount++;
            }
            if(end-start+1==totalOnes){
                zeroCount=Math.min(minZero, zeroCount);

            }
            else if(end-start+1>totalOnes){
                if(circular[start]==0){
                    zeroCount--;
                }
                minZero=Math.min(minZero, zeroCount);
                start++;
            }
        }
        return minZero;
    }
}



(03-08-2024)-------------------------------------------------------------------------------------------------------------------------------------------------------


1------>https://www.geeksforgeeks.org/problems/the-celebrity-problem/1

class Solution {
    // Function to find if there is a celebrity in the party or not.
    public int celebrity(int mat[][]) {
        int ans=-1, j=0, n=mat.length;
        for( int i=0; i<n; i++){
            for( j=0; j<n; j++){
                if(mat[i][j]==1)break;
            }
            if(j==n){
                for(j=0; j<n; j++){
                    if(i!=j && mat[j][i]==0)break;
                }
                if(j==n)ans=i;
                break;
            }
        }
        return ans;
        // code here
    }
}




(4-08-2024)-----------------------------------------------------------------------------------------------------------------------------------------------------



1----->https://www.geeksforgeeks.org/problems/n-meetings-in-one-room-1587115620/1


 public int maxMeetings(int n, int start[], int end[]) {
        // add your code here
        int temp[][] = new int[n][2];
        for(int i=0;i<n;i++){
            temp[i][0]=end[i];
            temp[i][1]=start[i];
        }
        Arrays.sort(temp,new Comparator<int[]>(){
            public int compare(int a[],int b[]){
                return a[0]-b[0];
            }
        });
        int ans = 1,last = temp[0][0];
        for(int i=1;i<n;i++){
            if(temp[i][1]>last){
                ans++;
                last=temp[i][0];
            }
        }
        return ans;
    }




(05-08-2024)------------------------------------------------------------------------------------------------------------------------------------------------------

1--->https://www.geeksforgeeks.org/problems/bottom-view-of-binary-tree/1


class Solution
{
    //Function to return a list containing the bottom view of the given tree.
    public ArrayList <Integer> bottomView(Node root){
        // Code here
        SortedMap<Integer, Integer> map = new TreeMap<>();
        Queue<Pair> q = new LinkedList<>();
        q.add(new Pair(root, 0));
        while(!q.isEmpty()){
            Pair p = q.poll();
            Node currNode = p.node;
            int currLevel = p.level;
            if(currNode.left != null)
                q.add(new Pair(currNode.left, currLevel-1));
            if(currNode.right != null)
                q.add(new Pair(currNode.right, currLevel+1));
            map.put(currLevel, currNode.data);
        }
        ArrayList<Integer> ans = new ArrayList<>();
        for(Map.Entry<Integer, Integer> entry:map.entrySet()){
            ans.add(entry.getValue());
        }
        return ans;
    }
}
class Pair{
    Node node;
    int level;
    Pair(Node node, int level){
        this.node = node;
        this.level = level;
    }
}


(06-08-2024)-------------------------------------------------------------------------------------------------------------------------------------------------------



1--->https://www.geeksforgeeks.org/problems/validate-an-ip-address-1587115621/1

class Solution {

    public boolean isValid(String str) {
        // Write your code here
        int temp=-1, count=0, index=-1;
        for(int i=0; i<str.length(); i++){
            if(str.charAt(i)=='.'){
                count++;
                if(temp<0 || temp>255)return false;
                if(temp!=0 && str.charAt(index+1)=='0')return false;
                temp=-1;
                index=i;
            }else{
                if(temp==-1)temp=0;
                temp=temp*10+(str.charAt(i)-'0');
            }
        }
        if(temp<0 || temp>255 || count!=3)return false;
        if(temp!=0 && str.charAt(index+1)=='0')return false;
        return true;
    }
}



(7-08-2024)

1----->https://www.geeksforgeeks.org/problems/k-th-element-of-two-sorted-array1317/1


class Solution {
    public int kthElement(int k, int[] arr1, int[] arr2) {
        int n1 = arr1.length, n2 = arr2.length;
        if (k == n1 + n2) return Math.max(arr1[n1 - 1], arr2[n2 - 1]);
        if (k == 1) return Math.min(arr1[0], arr2[0]);
        int i = 0, j = 0;
        while (i < n1 && j < n2 && k > 1) {
            if (arr1[i] <= arr2[j]) {
                i++;
            } else {
                j++;
            }
            k--;
        }
        
        while (i < n1 && k > 1) {
            i++;
            k--;
        }
        while (j < n2 && k > 1) {
            j++;
            k--;
        }
        if (i == n1) return arr2[j];
        else if (j == n2) return arr1[i];
        return Math.min(arr1[i], arr2[j]);
    }
}



(08-08-2024)
https://www.geeksforgeeks.org/problems/sum-tree/1
class Solution {
    public int traverse(Node root) {
        if (root == null) return 0;
        int left = traverse(root.left);
        int right = traverse(root.right);
        return root.data + left + right;
    }

    public boolean isSumTree(Node root) {
        if (root == null) return true;
        if (root.left == null && root.right == null) return true;
        if (root.left != null || root.right != null) {
            if (root.data != traverse(root.left) + traverse(root.right)) {
                return false;
            }
        }
        return isSumTree(root.left) && isSumTree(root.right);
    }
}
